#![feature(test)]
extern crate test;
use test::Bencher;
use rand::Rng;

use vec_rand::xorshiro256plus::*;

const NUM: u64 = 1_000;

#[bench]
fn test_thread_rng(b: &mut Bencher) {
    let mut rng = rand::thread_rng();
    b.iter(|| {
        for _ in 0..32 * NUM {
            rng.gen_range(0, 10000);
        }
        rng.gen_range(0, 10000)
    });
}


#[bench]
fn test_xorshiro256plus(b: &mut Bencher) {
    let mut seed: [u64; 4] = [
        6591408588322595484,
        5451729388608518856,
        8913376598984957243,
        17912695770704705270,
    ];

    b.iter(|| { 
        for _ in 0..32 * NUM {
            xorshiro256plus(& mut seed);
        }
        seed
    });
}

#[cfg(all(target_arch = "x86_64", target_feature = "avx2"))]
#[bench]
fn test_xorshiro256plus_avx(b: &mut Bencher) {
    let mut seed: [u64; 16] = [
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
    ];

    b.iter(|| {
        for _ in 0..8 * NUM {
            xorshiro256plus_avx(& mut seed);
        }
        seed
    });
}

#[cfg(all(target_arch = "x86_64", target_feature = "avx2"))]
#[bench]
fn test_xorshiro256plus_avx_ss4(b: &mut Bencher) {
    let mut seed: [u64; 64] = [
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
        6591408588322595484, 5451729388608518856, 8913376598984957243, 17912695770704705270,
    ];

    b.iter(|| {
        for _ in 0..2 * NUM {
            xorshiro256plus_avx_ss4(& mut seed);
        }
        seed
    });
}